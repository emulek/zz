<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
	<!ENTITY chapter1 SYSTEM "chapter1.xml">
	<!ENTITY chapter2 SYSTEM "chapter2.xml">
	<!ENTITY chapter3 SYSTEM "chapter3.xml">
	]>
<book id="begin" lang="ru">
	<bookinfo>
		<!-- <legalnotice>
			<para>
				Legal notice ...
			</para>
		</legalnotice> -->
		<author>
			<firstname>emulek</firstname>
			<surname>drBatty</surname>
		</author>
		<copyright>
			<year>2014</year>
			<holder>drBatty</holder>
		</copyright>
	</bookinfo>
	<title>zz</title>
	<preface id="overview"><title>Основная идея zz</title>
		<para>
			<indexterm><primary>zz</primary></indexterm>
			<indexterm><primary>Основная идея</primary></indexterm>
			Программа <command>zz</command> предназначена для <emphasis>надёжного</emphasis> сохранения/передачи
			информации. Основная идея программы заключается в разделении входного файла на части(parts), а каждой
			части, в свою очередь, на блоки(blocks). При этом размер всех блоков составляющих часть, <emphasis>больше</emphasis>
			размера каждой части. Таким образом программа <command>zz</command> увеличивает количество информации.
		</para>
		<para>
			Фактически, действие данной программы противоположно действию компрессоров(e.g. gzip, bzip2, xz, etc).
		</para>
		<para>
			Смысл этого в том, что-бы после неизбежной потери информации, полезную информацию можно было-бы
			всё равно извлечь.
		</para>
		<para>
			Количество необходимой для извлечения информации практически равно количеству исходной, однако для
			успешного извлечения необходимо и достаточно иметь <emphasis>любой</emphasis> набор блоков, которые составляют
			одну часть.
		</para>
		<para>
			В самом примитивном случае, данного эффекта можно добиться резервированием, т.е. сохранением не только файла,
			но и копии. К примеру, если имеется файл в 1Гб, то можно его сохранить в двух хранилищах, каждое размером в 1Гб. Если
			вероятность потери p = .1 = 10%, то после резервирования, вероятность потери сократиться до p^2 = .01 = 1%.
		</para>
		<para>
			Проблема в том, что на практике у нас физически нет двух хранилищ. На практики ситуация почти всегда следующая:
			например имеется флешка в 2Гб(точнее в 2`000`000`000байт, т.е. примерно 1.8626Гб), и нам требуется сохранить туда файл
			в 1400Мб, т.е. 1.367Гб. Очевидно, зарезервировать файл мы не сможем, сможем лишь записать файл один раз. При этом
			треть носителя будет пустой. Для резервирования нужна вторая такая флешка, но очевидно, тогда мы потеряем уже две трети.
		</para>
		<para>
			Таким образом, нам требуется программа, которая "размазывает" данные на блоки более удобным и гибким способом, нежели
			простое резервирование. Так, <emphasis>что-бы полностью использовать имеющийся у нас объём.</emphasis>
		</para>
		<para>
			Кроме того, хотелось-бы <emphasis>не хранить одну и ту же информацию несколько раз</emphasis>. Конечно это можно делать
			вручную, но это не наш путь. Компрессоры безусловно выполняют эту работу, но к сожалению, лишь в пределах своего "окна",
			которое всяко меньше оперативной памяти, и тем более размера архива. Мало того, даже небольшое изменение в начале архива,
			полностью меняет весь архив. Таким образом, если мы сегодня сохраняем архив, то он будет полностью другим, нежели вчерашний,
			даже если исходные файлы почти идентичны.
		</para>
		<para>
			Если мы выкачиваем информацию из сети, то разные части информации имеют разную цену: некоторые части достаются нам легко,
			другие приходится ждать. В итоге, караван движется со скоростью самого медленного верблюда.  Единственный выход - смириться
			с потерей "медленных верблюдов", просто увеличив число частей. Однако нам не известно, какая часть окажется "медленной"
			у реципиента, потому тут тоже пригодиться избыточность. Донор предлагает например 15 блоков на выбор, а реципиенту
			нужно только семь <emphasis>любых</emphasis>. Т.к. цена каждого блока непропорционально разная, то скорость сильно возрастёт.
			Особенно это будет заметно в т.н. облаках, где рецепиент берёт блоки с нескольких доноров. Физическое растояние до каждого
			донора случайно, но без избыточности нужно связаться со всеми из них. Ну а с избыточностью - лишь с самыми близкими, связь с
			которымы наиболее быстрая.
		</para>
		<para><link linkend="begin">Начало</link></para>
		<para><link linkend="chapter1">Принцип работы</link></para>
		<para><link linkend="chapter2">Реализация</link></para>
		<para><link linkend="chapter3">Использование</link></para>
	</preface>
&chapter1;
&chapter2;
&chapter3;
</book>
